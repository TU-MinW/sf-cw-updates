### See pom.xml- properties and profiles sections- for dynamically set properties
#Logging
logging.file: logs/app.log
service.greeting: Hello
#debug: true
#logging.level.org.springframework.integration.http: DEBUG
#logging.level.org.springframework: DEBUG
#logging.level.root: DEBUG


#Port to accept HTTP connections
server.port=${server.port}
#Path to accept HTTP connections from Motorola
http.inbound.motorola=${http.inbound.motorola}
#Path to accept HTTP connections for Activities from Cityworks to Motorola
http.inbound.cityworks.activities=${http.inbound.cityworks.activities}
#Path to accept HTTP connections for Activities from Cityworks to Salesforce
http.inbound.cityworkssalesforce.activities=${http.inbound.cityworkssalesforce.activities}
#Setup for HTTPS for all inbound web requests
#Spring Boot help: http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl
#Generating a key store in Java: https://docs.oracle.com/cd/E19509-01/820-3503/6nf1il6er/index.html
ssl.properties.filelocation=${ssl.properties.filelocation}


#ActiveMQ connection and settings
spring.activemq.broker-url=${spring.activemq.broker-url}
activemq.initialRedeliveryDelay=${activemq.initialRedeliveryDelay}
activemq.redeliveryDelay=${activemq.redeliveryDelay}
activemq.maximumRedeliveries=${activemq.maximumRedeliveries}

#Mappings File(s) Path
mappings.location.priority=PriorityMappings.json

#Cityworks API params and connection settings
#The description for Other System ID in Cityworks
cityworks.text4.motorola=Motorola CSR
cityworks.text4.salesforce=Salesforce
cityworks.username=${cityworks.username}
cityworks.password=${cityworks.password}
cityworks.baseserviceurl=${cityworks.baseserviceurl}
cityworks.publicbaseserviceurl=${cityworks.publicbaseserviceurl}


#Motorola API params and connection settings
#The code to pass for updating the CSR's Cityworks ID Flex Note
motorola.cityworks-id.code=CWSRNUM
motorola.apphub.userid=${motorola.apphub.userid}
motorola.apphub.password=${motorola.apphub.password}
motorola.apphub.sourcecode=${motorola.apphub.sourcecode}
motorola.apphub.url=${motorola.apphub.url}


#Salesforce API params and connection settings
salesforce.baseserviceurl=${salesforce.baseserviceurl}
salesforce.apikey=${salesforce.apikey}
#Salesforce special code settings
salesforce.srclose.activtycode=${salesforce.srclose.activtycode}
salesforce.srclose.outcomecode=${salesforce.srclose.outcomecode}
#Period to poll Salesforce for new SR
salesforce.newrequest.pollinginterval=${salesforce.newrequest.pollinginterval}
salesforce.newrequest.pollingperoiddate=${salesforce.newrequest.pollingperoiddate}
salesforce.newrequest.pollingperoidminute=${salesforce.newrequest.pollingperoidminute}


#ArcGIS params and connection settings
arcgis.geometryserviceurl=${arcgis.geometryserviceurl}
arcgis.geometrysalesforceinsr=${arcgis.geometrysalesforceinsr}
arcgis.geometrycityworksoutsr=${arcgis.geometrycityworksoutsr}


#SQL Server connection settings to the Cityworks DB. Reference: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html#boot-features-connect-to-production-database
spring.datasource.url=${spring.datasource.url}
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#These properties help test the Tomcat JDBC connection pool connections to see if they are valid before attempting to use. Beneficial for DB restarts, amongst other cases.
spring.datasource.testOnBorrow=true
spring.datasource.validationQuery=SELECT 1
spring.datasource.removeAbandoned=true
#Period to poll Cityworks DB for SR status updates
cityworks.db.statusupdate.pollinginterval=${cityworks.db.statusupdate.pollinginterval}